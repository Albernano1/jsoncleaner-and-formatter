{
  "version": 3,
  "sources": ["../src/extension.ts", "../src/loadReplacements.ts"],
  "sourcesContent": ["//@ts-check\n// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\n\nimport {loadReplacements} from './loadReplacements';\n\n//let loadReplacements = require('./loadReplacements');\n\n/**\n * @description \"Actual text Editor, declared to be globally used\"\n */\nlet activeTextEditor: vscode.TextEditor | undefined;\n\n// this method is called when your extension is activated\n// your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n\n\t// Use the console to output diagnostic information (console.log) and errors (console.error)\n\t// This line of code will only be executed once when your extension is activated\n\tconsole.log('Congratulations, your extension \"jsoncleaner\" is now active!');\n\n\t// The command has been defined in the package.json file\n\t// Now provide the implementation of the command with registerCommand\n\t// The commandId parameter must match the command field in package.json\n\n\tlet disposableCleanJson = vscode.commands.registerCommand('jsoncleaner.cleanJson', () => {\n\t\t// The code you place here will be executed every time your command is executed\n\t\tgetActiveTextEditorAndFile(context);\n\t\tcleanJson(context);\n\n\t\t// Display a message box to the user\n\t\tvscode.window.showInformationMessage(' Cleaning Json File ');\n\n\t});\n\n\tcontext.subscriptions.push(disposableCleanJson);\n\n\tconsole.log('Command registered');\n\n}\n\n// this method is called when your extension is deactivated\nexport function deactivate() { }\n\n/**\n * @description \"Sets the text editor and current file\"\n * @returns nothing\n */\nfunction getActiveTextEditorAndFile(context: vscode.ExtensionContext) {\n\n\t// Calls Vs to get the text editor being used\n\tactiveTextEditor = vscode.window.activeTextEditor;\n\n\tif (!activeTextEditor) {\n\t\treturn;\n\t}\n}\n\n/**\n * @description \"Cleans the current file\"\n * @returns nothing\n */\nfunction cleanJson(context: vscode.ExtensionContext) {\n\t\n\ttry {\n\t\n\t\t// Step 1 - Load replacements from file\n\t\tlet replacements:string[][];\n\t\n\t\treplacements = loadReplacements(context);\n\n\t\tif (!vscode.window.activeTextEditor) {\n\t\t\t// Handle as error\n\t\t\tthrow new Error('No active text editor in use');\n\t\t}\n\n\t\t//Step 2 - Recover active editor text and apply modifications\n\t\tlet text: string = vscode.window.activeTextEditor.document.getText();\n\t\t\n\t\t// Step 2.1 - Modify HTML urls\n\t\ttext = htmltextModification(context, text) ;\n\n\t\t// Step 2.2 - Modify Loaded from text file replacement pairs\n\t\treplacements.forEach(element => {\n\t\t\ttext = text.replaceAll(element[0],element[1]);\n\t\t});\n\n\t\t//Step 3 - Set text on the window\n\t\t//Creating a new range with startLine, startCharacter & endLine, endCharacter.\n\t\tlet range: vscode.Range = new vscode.Range(0,0,vscode.window.activeTextEditor.document.lineCount, 0);\n\t\trange = vscode.window.activeTextEditor.document.validateRange(range);\n\t\t\n\t\tlet edit = new vscode.WorkspaceEdit();\n\t\tedit.replace(vscode.window.activeTextEditor.document.uri,range,text);\n\t\tvscode.workspace.applyEdit(edit);\n\n\t\tvscode.window.showInformationMessage(' Execution Completed ');\n\n\t} catch (error: any) {\n\t\tconsole.log(\"JC - There has been an error triying to clean the file: \"+ error.message);\n\t\tvscode.window.showErrorMessage(\" There has been an error triying to clean the file: \"+error.message);\n\t}\n}\n\n/**\n * @description \"Cleans the current file\"\n * @returns nothing\n */\nfunction htmltextModification(context: vscode.ExtensionContext, text: string):string{\n\n\tlet htmlregex1: RegExp = RegExp(/\\/https[\\S]*\\/,/);\n\tlet matches: RegExpMatchArray | null = text.match(htmlregex1);\n\t\n\tif (!matches) {\n\t\t//Matches Null, warning and end\n\t\tvscode.window.showInformationMessage(' No matches to modify ');\n\t}else if (matches.length >= 1) {\n\t\tmatches.forEach(element => {\n\t\t\t//First and last char are going to be replaced by \"\"\n\t\t\tlet modified = element.replace(RegExp(/\\//), '\"');\n\t\t\tmodified = modified.substring(0, modified.length - 1) + '\",';\n\t\t\ttext = text.replace(element, modified);\n\t\t});\n\n\t}else{\n\t\t//No matches, warning and end\n\t\tvscode.window.showInformationMessage(' No matches to modify ');\n\t}\n\n\treturn text;\n}\n\n// //;///*;*;\n\t// text = text.replaceAll(\"///*\", \"*\");\n\t// //;///\";\";\n\t// text = text.replaceAll(\"///\\\"\", '\"');\n\t// //;//\";\";\n\t// text = text.replaceAll(\"//\\\"\", '\"');\n\t// //;/\";\";\n\t// text = text.replaceAll(\"/\\\"\", \"\\\"\");\n\t// //;\"{;{;\n\t// text = text.replaceAll(\"\\\"{\", \"{\");\n\t// //;}\";};\n\t// text = text.replaceAll(\"}\\\"\", \"}\");\n\t// //;\"\\[;\\[;\n\t// text = text.replaceAll(\"\\\"[\", \"[\");\n\t// //;\\]\";\\];\n\t// text = text.replaceAll(\"]\\\"\", \"}\");\n\t// //;///r///n; ;\n\t// text = text.replaceAll(\"///r///n\", \" \");\n\t// //;///n; ;\n\t// text = text.replaceAll(\"///n\", \" \");\n\t// //;//r//n; ;\n\t// text = text.replaceAll(\"//r//n\", \" \");\n\t// //;//n; ;\n\t// text = text.replaceAll(\"//n\", \" \");\n\t// //;/r/n; ;\n\t// text = text.replaceAll(\"/r/n\", \" \");\n\t// //;/n; ;\n\t// text = text.replaceAll(\"/n\", \" \");\n\n\n\n", "import * as path from 'path';\nimport * as fs from 'fs';\nimport * as vscode from 'vscode';\n\n/**\n * Read Replacement values present in replacements txt, returns them as an strin array\n */\n\nexport function loadReplacements(context: vscode.ExtensionContext): string[][] {\n\n    try {\n    \n        let fullFilePath: string = context.asAbsolutePath(path.join('resources', 'replacements.txt'));\n        let fileContent = fs.readFileSync(fullFilePath,'utf8');\n\n        let configuredReplacements: Object = vscode.workspace.getConfiguration('jc').get('textReplacements',{});\n        let replacements: string[][] = [];\n\n        Object.entries(configuredReplacements).forEach(propertie =>{\n            replacements.push([propertie[0], propertie[1]]);\n        });\n\n        return replacements;\n\n    } catch (error: any){\n        console.log(\"JC - There's been an error reading replacements: \"+ error.message);\n        throw new Error(\"There's been an error reading replacements: \"+ error.message);\n    }\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,cAAwB;;;ACHxB,WAAsB;AACtB,SAAoB;AACpB,aAAwB;AAMjB,0BAA0B,SAA8C;AAE3E,MAAI;AAEA,QAAI,eAAuB,QAAQ,eAAe,AAAK,UAAK,aAAa;AACzE,QAAI,cAAc,AAAG,gBAAa,cAAa;AAE/C,QAAI,yBAAiC,AAAO,iBAAU,iBAAiB,MAAM,IAAI,oBAAmB;AACpG,QAAI,eAA2B;AAE/B,WAAO,QAAQ,wBAAwB,QAAQ,eAAY;AACvD,mBAAa,KAAK,CAAC,UAAU,IAAI,UAAU;AAAA;AAG/C,WAAO;AAAA,WAEF,OAAP;AACE,YAAQ,IAAI,sDAAqD,MAAM;AACvE,UAAM,IAAI,MAAM,iDAAgD,MAAM;AAAA;AAAA;;;ADd9E,IAAI;AAIG,kBAAkB,SAAkC;AAI1D,UAAQ,IAAI;AAMZ,MAAI,sBAAsB,AAAO,iBAAS,gBAAgB,yBAAyB,MAAM;AAExF,+BAA2B;AAC3B,cAAU;AAGV,IAAO,eAAO,uBAAuB;AAAA;AAItC,UAAQ,cAAc,KAAK;AAE3B,UAAQ,IAAI;AAAA;AAKN,sBAAsB;AAAA;AAM7B,oCAAoC,SAAkC;AAGrE,qBAAmB,AAAO,eAAO;AAEjC,MAAI,CAAC,kBAAkB;AACtB;AAAA;AAAA;AAQF,mBAAmB,SAAkC;AAEpD,MAAI;AAGH,QAAI;AAEJ,mBAAe,iBAAiB;AAEhC,QAAI,CAAC,AAAO,eAAO,kBAAkB;AAEpC,YAAM,IAAI,MAAM;AAAA;AAIjB,QAAI,OAAe,AAAO,eAAO,iBAAiB,SAAS;AAG3D,WAAO,qBAAqB,SAAS;AAGrC,iBAAa,QAAQ,aAAW;AAC/B,aAAO,KAAK,WAAW,QAAQ,IAAG,QAAQ;AAAA;AAK3C,QAAI,QAAsB,IAAW,cAAM,GAAE,GAAE,AAAO,eAAO,iBAAiB,SAAS,WAAW;AAClG,YAAQ,AAAO,eAAO,iBAAiB,SAAS,cAAc;AAE9D,QAAI,OAAO,IAAW;AACtB,SAAK,QAAQ,AAAO,eAAO,iBAAiB,SAAS,KAAI,OAAM;AAC/D,IAAO,kBAAU,UAAU;AAE3B,IAAO,eAAO,uBAAuB;AAAA,WAE7B,OAAP;AACD,YAAQ,IAAI,6DAA4D,MAAM;AAC9E,IAAO,eAAO,iBAAiB,yDAAuD,MAAM;AAAA;AAAA;AAQ9F,8BAA8B,SAAkC,MAAoB;AAEnF,MAAI,aAAqB,OAAO;AAChC,MAAI,UAAmC,KAAK,MAAM;AAElD,MAAI,CAAC,SAAS;AAEb,IAAO,eAAO,uBAAuB;AAAA,aAC5B,QAAQ,UAAU,GAAG;AAC9B,YAAQ,QAAQ,aAAW;AAE1B,UAAI,WAAW,QAAQ,QAAQ,OAAO,OAAO;AAC7C,iBAAW,SAAS,UAAU,GAAG,SAAS,SAAS,KAAK;AACxD,aAAO,KAAK,QAAQ,SAAS;AAAA;AAAA,SAG1B;AAEJ,IAAO,eAAO,uBAAuB;AAAA;AAGtC,SAAO;AAAA;",
  "names": []
}
