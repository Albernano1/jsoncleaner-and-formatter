{
  "version": 3,
  "sources": ["../src/extension.ts"],
  "sourcesContent": ["// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\n\n/**\n * @description \"Actual text Editor, declared to be globally used\"\n */\nlet activeTextEditor: vscode.TextEditor | undefined;\n\n// this method is called when your extension is activated\n// your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n\n\t// Use the console to output diagnostic information (console.log) and errors (console.error)\n\t// This line of code will only be executed once when your extension is activated\n\tconsole.log('Congratulations, your extension \"wjsoncleaner\" is now active!');\n\n\t// The command has been defined in the package.json file\n\t// Now provide the implementation of the command with registerCommand\n\t// The commandId parameter must match the command field in package.json\n\tlet disposable = vscode.commands.registerCommand('wjsoncleaner.helloWorld', () => {\n\t\t// The code you place here will be executed every time your command is executed\n\t\t// Display a message box to the user\n\t\tvscode.window.showInformationMessage('Hello World from WJsonCleaner!');\n\t});\n\n\tcontext.subscriptions.push(disposable);\n\n\tlet disposableCleanJson = vscode.commands.registerCommand('wjsoncleaner.cleanJson', () => {\n\t\t// The code you place here will be executed every time your command is executed\n\t\tgetActiveTextEditorAndFile();\n\t\tcleanJson();\n\n\t\t// Display a message box to the user\n\t\tvscode.window.showInformationMessage(' Cleaning Json File ');\n\n\t});\n\n\tcontext.subscriptions.push(disposableCleanJson);\n\n}\n\n// this method is called when your extension is deactivated\nexport function deactivate() { }\n\n/**\n * @description \"Sets the text editor and current file\"\n * @returns nothing\n */\nfunction getActiveTextEditorAndFile() {\n\n\t// Calls Vs to get the text editor being used\n\tactiveTextEditor = vscode.window.activeTextEditor;\n\n\tif (!activeTextEditor) {\n\t\treturn;\n\t}\n}\n\n/**\n * @description \"Cleans the current file\"\n * @returns nothing\n */\nfunction cleanJson() {\n\t//1 get actual editor and file - Update done first outside\n\t//getActiveTextEditorAndFile();\n\n\tif (!activeTextEditor) {\n\t\treturn;\n\t}\n\n\t//2 Modify\n\tlet text = activeTextEditor.document.getText();\n\n\tlet htmlregex1 = RegExp(/\\/https[\\S]*\\/,/);\n\tlet matches = text.match(htmlregex1);\n\n\tif (!matches) {\n\t\treturn;\n\t}\n\n\tif (matches.length >= 1) {\n\t\tmatches.forEach(element => {\n\n\t\t\t//first and last char are going to be replaced by \"\"\n\t\t\tlet modified = element.replace(RegExp(/\\//), '\"');\n\t\t\tmodified = modified.substring(0, modified.length - 1) + '\",';\n\n\t\t\ttext = text.replace(element, modified);\n\n\t\t});\n\t}\n\n\t//;///*;*;\n\ttext = text.replaceAll(\"///*\", \"*\");\n\t//;///\";\";\n\ttext = text.replaceAll(\"///\\\"\", '\"');\n\t//;//\";\";\n\ttext = text.replaceAll(\"//\\\"\", '\"');\n\t//;/\";\";\n\ttext = text.replaceAll(\"/\\\"\", \"\\\"\");\n\t//;\"{;{;\n\ttext = text.replaceAll(\"\\\"{\", \"{\");\n\t//;}\";};\n\ttext = text.replaceAll(\"}\\\"\", \"}\");\n\t//;\"\\[;\\[;\n\ttext = text.replaceAll(\"\\\"[\", \"[\");\n\t//;\\]\";\\];\n\ttext = text.replaceAll(\"]\\\"\", \"}\");\n\t//;///r///n; ;\n\ttext = text.replaceAll(\"///r///n\", \" \");\n\t//;///n; ;\n\ttext = text.replaceAll(\"///n\", \" \");\n\t//;//r//n; ;\n\ttext = text.replaceAll(\"//r//n\", \" \");\n\t//;//n; ;\n\ttext = text.replaceAll(\"//n\", \" \");\n\t//;/r/n; ;\n\ttext = text.replaceAll(\"/r/n\", \" \");\n\t//;/n; ;\n\ttext = text.replaceAll(\"/n\", \" \");\n\n\t//3 set text on the window\n\t//Creating a new range with startLine, startCharacter & endLine, endCharacter.\n\tlet range = new vscode.Range(0, 0, activeTextEditor.document.lineCount, 0);\n\n\tlet validatedRange = activeTextEditor.document.validateRange(range);\n\n\tactiveTextEditor.edit(editBuilder => {\n\t\teditBuilder.replace(validatedRange, text);\n\t});\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,aAAwB;AAKxB,IAAI;AAIG,kBAAkB,SAAkC;AAI1D,UAAQ,IAAI;AAKZ,MAAI,aAAa,AAAO,gBAAS,gBAAgB,2BAA2B,MAAM;AAGjF,IAAO,cAAO,uBAAuB;AAAA;AAGtC,UAAQ,cAAc,KAAK;AAE3B,MAAI,sBAAsB,AAAO,gBAAS,gBAAgB,0BAA0B,MAAM;AAEzF;AACA;AAGA,IAAO,cAAO,uBAAuB;AAAA;AAItC,UAAQ,cAAc,KAAK;AAAA;AAKrB,sBAAsB;AAAA;AAM7B,sCAAsC;AAGrC,qBAAmB,AAAO,cAAO;AAEjC,MAAI,CAAC,kBAAkB;AACtB;AAAA;AAAA;AAQF,qBAAqB;AAIpB,MAAI,CAAC,kBAAkB;AACtB;AAAA;AAID,MAAI,OAAO,iBAAiB,SAAS;AAErC,MAAI,aAAa,OAAO;AACxB,MAAI,UAAU,KAAK,MAAM;AAEzB,MAAI,CAAC,SAAS;AACb;AAAA;AAGD,MAAI,QAAQ,UAAU,GAAG;AACxB,YAAQ,QAAQ,aAAW;AAG1B,UAAI,WAAW,QAAQ,QAAQ,OAAO,OAAO;AAC7C,iBAAW,SAAS,UAAU,GAAG,SAAS,SAAS,KAAK;AAExD,aAAO,KAAK,QAAQ,SAAS;AAAA;AAAA;AAM/B,SAAO,KAAK,WAAW,QAAQ;AAE/B,SAAO,KAAK,WAAW,QAAS;AAEhC,SAAO,KAAK,WAAW,OAAQ;AAE/B,SAAO,KAAK,WAAW,MAAO;AAE9B,SAAO,KAAK,WAAW,MAAO;AAE9B,SAAO,KAAK,WAAW,MAAO;AAE9B,SAAO,KAAK,WAAW,MAAO;AAE9B,SAAO,KAAK,WAAW,MAAO;AAE9B,SAAO,KAAK,WAAW,YAAY;AAEnC,SAAO,KAAK,WAAW,QAAQ;AAE/B,SAAO,KAAK,WAAW,UAAU;AAEjC,SAAO,KAAK,WAAW,OAAO;AAE9B,SAAO,KAAK,WAAW,QAAQ;AAE/B,SAAO,KAAK,WAAW,MAAM;AAI7B,MAAI,QAAQ,IAAW,aAAM,GAAG,GAAG,iBAAiB,SAAS,WAAW;AAExE,MAAI,iBAAiB,iBAAiB,SAAS,cAAc;AAE7D,mBAAiB,KAAK,iBAAe;AACpC,gBAAY,QAAQ,gBAAgB;AAAA;AAAA;",
  "names": []
}
